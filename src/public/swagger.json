{
  "swagger": "2.0",
  "info": {
    "description": "Data API, database migration scripts, and backend services for all Podverse models.",
    "version": "1.0.7",
    "title": "Podverse API",
    "termsOfService": "https://podverse.fm/terms/",
    "contact": {
      "email": "dev@podverse.fm"
    },
    "license": {
      "name": "GNU Affero General Public License v3",
      "url": "https://www.gnu.org/licenses/agpl-3.0.en.html"
    }
  },
  "host": "localhost:1234",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "accountClaimToken",
      "description": "a token for redeeming memberships"
    },
    {
      "name": "appStorePurchase",
      "description": "an App Store receipt object"
    },
    {
      "name": "auth",
      "description": "authentication related endpoints"
    },
    {
      "name": "author",
      "description": "podcast hosts, co-hosts, and guests"
    },
    {
      "name": "category",
      "description": "aka genre"
    },
    {
      "name": "episode"
    },
    {
      "name": "feedUrl",
      "description": "official podcast feed URLs"
    },
    {
      "name": "googlePlayPurchase",
      "description": "a Google Play receipt object"
    },
    {
      "name": "mediaRef",
      "description": "references to sections of audio/video"
    },
    {
      "name": "paypalOrder",
      "description": "the PayPal order object"
    },
    {
      "name": "playlist",
      "description": "lists of mediaRefs and episodes"
    },
    {
      "name": "podcast"
    },
    {
      "name": "user"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/claim-account": {
      "get": {
        "tags": [
          "accountClaimToken"
        ],
        "summary": "Get accountClaimToken by ID",
        "description": "Returns a accountClaimToken object",
        "operationId": "getAccountClaimTokenById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "accountClaimTokenId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/AccountClaimToken"
            }
          },
          "404": {
            "description": "AccountClaimToken not found"
          }
        }
      },
      "post": {
        "tags": [
          "accountClaimToken"
        ],
        "summary": "Redeem an accountClaimToken",
        "description": "Returns the new accountClaimToken object",
        "operationId": "redeemAccountClaimToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "id": "string",
                "email": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/AccountClaimToken"
            }
          },
          "404": {
            "description": "AccountClaimToken not found"
          },
          "405": {
            "description": "AccountClaimToken already claimed"
          }
        }
      }
    },
    "/app-store/update-purchase-status": {
      "post": {
        "tags": [
          "appStorePurchase"
        ],
        "summary": "Create or update an appStorePurchase",
        "description": "Returns the new appStorePurchase object",
        "operationId": "createOrUpdateAppStorePurchase ",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/AppStorePurchase"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/auth/get-authenticated-user-info": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Get the currently logged-in user's info",
        "description": "Returns an object with the currently logged-in user's info",
        "operationId": "getAuthenticatedUserInfo",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login as user",
        "description": "Returns user information in the response body. If query param includeBodyToken=true is provided, then it will return the bearer token in the response body, else it will set the bearer token as an HTTPOnly cookie named \"Authorization\".",
        "operationId": "authLogin",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string",
                "password": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "Clears the authorization cookie",
        "operationId": "authLogout",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Reset a user's password",
        "description": "Reset a user's password if the correct token is provided",
        "operationId": "authResetPassword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "password": "string",
                "resetPasswordToken": "guid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found or invalid token"
          }
        }
      }
    },
    "/auth/send-reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Send email to reset user's password",
        "description": "Sends email to user that directs the user to the password reset page, along with a resetPasswordToken",
        "operationId": "authSendResetPassword",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, token has expired"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/send-verification": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Send email to verify a user's email address",
        "description": "Send email to verify a user's email address",
        "operationId": "authSendVerification",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/auth/sign-up": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Sign up new user",
        "description": "Creates a new user, sends a verification email, and returns user information in the response body. If query param includeBodyToken=true is provided, then it will return the bearer token in the response body, else it will set the bearer token as an HTTPOnly cookie named \"Authorization\".",
        "operationId": "authSignUp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string",
                "name": "string",
                "password": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/auth/verify-email": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Verify a user's email address",
        "description": "Verification is successful if a valid emailVerificationToken is included in the request",
        "operationId": "authVerifyEmail",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized, token has expired"
          },
          "404": {
            "description": "User not found or invalid verification token"
          }
        }
      }
    },
    "/author": {
      "get": {
        "tags": [
          "author"
        ],
        "summary": "Find authors by query",
        "description": "Returns an array of authors",
        "operationId": "getAuthors",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "type": "string"
          },
          {
            "name": "slug",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Author"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/author/:id": {
      "get": {
        "tags": [
          "author"
        ],
        "summary": "Get author by ID",
        "description": "Returns an author object",
        "operationId": "getAuthorById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "authorId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Author"
            }
          },
          "404": {
            "description": "Author not found"
          }
        }
      }
    },
    "/category": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Find categories by query",
        "description": "Returns an array of categories",
        "operationId": "getCategories",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "type": "string"
          },
          {
            "name": "slug",
            "in": "query",
            "type": "string"
          },
          {
            "name": "title",
            "in": "query",
            "type": "string"
          },
          {
            "name": "topLevelCategories",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          }
        }
      }
    },
    "/category/:id": {
      "get": {
        "tags": [
          "category"
        ],
        "summary": "Get category by ID",
        "description": "Returns a category object",
        "operationId": "getCategoryById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Category"
            }
          },
          "404": {
            "description": "Category not found"
          }
        }
      }
    },
    "/episode": {
      "get": {
        "tags": [
          "episode"
        ],
        "summary": "Find episodes by query",
        "description": "Returns an array of episodes. Set includePodcast = true if you want the podcast included in the response. Pass a string to searchTitle to filter based on episode title.",
        "operationId": "getEpisodes",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "includePodcast",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "podcastId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchTitle",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Episode"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/episode/:id": {
      "get": {
        "tags": [
          "episode"
        ],
        "summary": "Get episode by ID",
        "description": "Returns an episode object",
        "operationId": "getEpisodeById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "episodeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Episode"
            }
          },
          "404": {
            "description": "Episode not found"
          }
        }
      }
    },
    "/feedUrl/:id": {
      "get": {
        "tags": [
          "feedUrl"
        ],
        "summary": "Get feedUrl by ID",
        "description": "Returns a single feedUrl object",
        "operationId": "getFeedUrlById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "feedUrlId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/FeedUrl"
            }
          },
          "404": {
            "description": "FeedUrl not found"
          }
        }
      }
    },
    "/google-play/update-purchase-status": {
      "post": {
        "tags": [
          "googlePlayPurchase"
        ],
        "summary": "Create or update a googlePlayPurchase",
        "description": "Returns the new googlePlayPurchase object",
        "operationId": "createOrUpdateGooglePlayPurchase ",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/GooglePlayPurchase"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/mediaRef": {
      "get": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Find mediaRefs by query",
        "description": "Returns an array of mediaRefs. Pass a string to searchTitle to filter based on clip, episode, or podcast title. Set includeEpisode to true if you want episode data returned, or includePodcast to true if you want episode and podcast data returned.",
        "operationId": "getMediaRefs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "episodeId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "includeEpisode",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "includePodcast",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "podcastId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchTitle",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Create a mediaRef",
        "description": "Returns a new mediaRef object",
        "operationId": "createMediaRef",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "authors": ["string"],
                "categories": ["string"],
                "endTime": "integer",
                "episodeId": "string",
                "episodeImageUrl": "url",
                "episodeLinkUrl": "url",
                "episodeMediaUrl": "url",
                "episodePubDate": "date",
                "episodeSummary": "string",
                "episodeTitle": "string",
                "isPublic": "boolean",
                "podcastFeedUrl": "url",
                "podcastGuid": "string",
                "podcastId": "string",
                "podcastImageUrl": "url",
                "podcastIsExplicit": "boolean",
                "podcastTitle": "string",
                "startTime": "integer",
                "title": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "patch": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Update a mediaRef",
        "description": "Returns the updated mediaRef object",
        "operationId": "updateMediaRef",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "endTime": "integer",
                "id": "string - required",
                "isPublic": "boolean",
                "startTime": "integer",
                "title": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/mediaRef/:id": {
      "get": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Get mediaRef by ID",
        "description": "Returns a single mediaRef object",
        "operationId": "getMediaRefById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "404": {
            "description": "MediaRef not found"
          }
        }
      },
      "delete": {
        "tags": [
          "mediaRef"
        ],
        "summary": "Delete mediaRef by ID",
        "description": "Returns success or error message",
        "operationId": "getMediaRefById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of mediaRef to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/MediaRef"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "MediaRef not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/paypal/order": {
      "post": {
        "tags": [
          "paypalOrder"
        ],
        "summary": "Create a paypalOrder",
        "description": "Returns a new paypalOrder object",
        "operationId": "createPayPalOrder",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "paymentID": "string"
              }
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/paypal/order/:id": {
      "get": {
        "tags": [
          "paypalOrder"
        ],
        "summary": "Get paypalOrder by ID",
        "description": "Returns a logged-in user's paypalOrder object",
        "operationId": "getPayPalOrder",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "paypalOrderId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PayPalOrder"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "PayPalOrder not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/paypal/webhooks/payment-completed": {
      "post": {
        "tags": [
          "paypalOrder"
        ],
        "summary": "Handle webhook notifications to update a PayPalOrder object",
        "description": "When an request is made to this endpoint, it then takes the request body and passes it into a request to PayPal to verify the order is valid. If it is, then locally we check if the notification is newer than the last updated date of the paypalOrder, and if that is true the paypalOrder is updated with the latest status. Always returns status 200 so that PayPal stops sending the notification (I haven't confirmed if that's needed actually). Check the PayPal Webhooks Simulator for the response data structure.",
        "operationId": "webhooksPaymentCompletedPayPal",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/PayPalOrder"
            }
          }
        }
      }
    },
    "/playlist": {
      "get": {
        "tags": [
          "playlist"
        ],
        "summary": "Find playlists by query",
        "description": "Returns an array of playlists",
        "operationId": "getPlaylists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "playlistId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "skip",
            "in": "query",
            "type": "integer"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      },
      "post": {
        "tags": [
          "playlist"
        ],
        "summary": "Create a playlist",
        "description": "Returns the new playlist object",
        "operationId": "createPlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "description": "string",
                "isPublic": "boolean",
                "itemsOrder": ["string"],
                "mediaRefs": ["string"],
                "title": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "playlist"
        ],
        "summary": "Update a playlist",
        "description": "Returns the updated playlist object",
        "operationId": "updatePlaylist",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "id": "string",
                "description": "string",
                "isPublic": "boolean",
                "itemsOrder": ["string"],
                "mediaRefs": ["string"],
                "title": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/playlist/:id": {
      "get": {
        "tags": [
          "playlist"
        ],
        "summary": "Get playlist by ID",
        "description": "Returns a playlist object",
        "operationId": "getPlaylistById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "playlistId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "404": {
            "description": "Playlist not found"
          }
        }
      },
      "delete": {
        "tags": [
          "playlist"
        ],
        "summary": "Delete playlist by ID",
        "description": "Returns success or error message",
        "operationId": "getPlaylistById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of playlist to delete",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Playlist not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/playlist/add-or-remove": {
      "patch": {
        "tags": [
          "playlist"
        ],
        "summary": "Add or remove mediaRef or episode to playlist",
        "description": "Adds or removes mediaRef or episode to playlist",
        "operationId": "playlistAddOrRemove",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "episodeId": "string",
                "mediaRefId": "string",
                "playlistId": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Playlist"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/playlist/toggle-subscribe/:id": {
      "get": {
        "tags": [
          "playlist"
        ],
        "summary": "Toggle subscribe to playlist",
        "description": "Subscribe or unsubscribe from playlist.",
        "operationId": "playlistToggleSubscribe",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of playlist to toggle subscribe",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/podcast": {
      "get": {
        "tags": [
          "podcast"
        ],
        "summary": "Find podcasts by query",
        "description": "Returns an array of podcasts. Set includeAuthors or includeCategories to true if needed.",
        "operationId": "getPodcasts",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "categories",
            "in": "query",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "name": "includeAuthors",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "includeCategories",
            "in": "query",
            "type": "boolean"
          },
          {
            "name": "podcastId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchAuthor",
            "in": "query",
            "type": "string"
          },
          {
            "name": "searchTitle",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "number"
          },
          {
            "name": "sort",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Podcast"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/podcast/:id": {
      "get": {
        "tags": [
          "podcast"
        ],
        "summary": "Get podcast by ID",
        "description": "Returns a podcast object",
        "operationId": "getPodcastById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "podcastId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Podcast"
            }
          },
          "404": {
            "description": "Podcast not found"
          }
        }
      }
    },
    "/podcast/metadata": {
      "get": {
        "tags": [
          "podcast"
        ],
        "summary": "Find the latest metadata for a list of podcasts",
        "description": "Accepts a list of podcast ids and returns an array of only the latest metadata for those podcasts.",
        "operationId": "getPodcastsMetadata",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "podcastId",
            "in": "query",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Podcast"
            }
          },
          "400": {
            "description": "Bad request"
          }
        }
      }
    },
    "/podcast/toggle-subscribe/:id": {
      "get": {
        "tags": [
          "podcast"
        ],
        "summary": "Toggle subscribe to podcast",
        "description": "Subscribe or unsubscribe from podcast.",
        "operationId": "podcastToggleSubscribe",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of podcast to toggle subscribe",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Find public users by query",
        "description": "Returns an array of public user objects. Must provide a userIds query param or it will return an empty array.",
        "operationId": "getUsers",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userIds",
            "in": "query",
            "type": "string"
          },
          {
            "name": "page",
            "in": "query",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete logged-in user",
        "description": "Returns success or error message",
        "operationId": "authUserDelete",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      },
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Update logged-in user",
        "description": "Returns the updated user object",
        "operationId": "userUpdate",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "example": {
                "email": "string",
                "id": "string - required",
                "isPublic": "boolean",
                "name": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/:id": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by ID",
        "description": "Returns a user object",
        "operationId": "getUserById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    },
    "/user/mediaRefs": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the currently logged-in user's mediaRefs",
        "description": "Returns an array of the currently logged-in user's mediaRefs",
        "operationId": "getUserMediaRefs",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/playlists": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the currently logged-in user's playlists",
        "description": "Returns an array of the currently logged-in user's playlists",
        "operationId": "getUserPlaylists",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/:id/mediaRefs": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a public user's mediaRefs",
        "description": "Returns an array of the public user's mediaRefs. If user not found, returns an empty array.",
        "operationId": "getPublicUserMediaRefs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/user/:id/playlists": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get a public user's playlists",
        "description": "Returns an array of the public user's playlists. If user not found, returns an empty array.",
        "operationId": "getPublicUserPlaylists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/user/toggle-subscribe/:id": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Toggle subscribe to user",
        "description": "Subscribe or unsubscribe from user.",
        "operationId": "userToggleSubscribe",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of user to toggle subscribe",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/update-history-item-playback-position": {
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Update a logged-in user's history item playback position",
        "description": "Returns a success message",
        "operationId": "userUpdateHistoryItemPlaybackPosition",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/add-or-update-history-item": {
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Add or update a logged-in user's history item",
        "description": "Returns a success message",
        "operationId": "userAddOrUpdateHistoryItem",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/history-item": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Remove episode or mediaRef from logged-in user's history items.",
        "description": "Must provide an episodeId or mediaRefId.",
        "operationId": "userHistoryItemRemove",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "episodeId",
            "in": "query",
            "type": "string"
          },
          {
            "name": "mediaRefId",
            "in": "query",
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/history-item/clear-all": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Removes all of a logged-in user's history items.",
        "description": "Removes all of a logged-in user's history items.",
        "operationId": "userHistoryItemClearAll",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successful operation"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/download": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get the logged-in user's full user profile",
        "description": "Returns the logged-in user's full user profile.",
        "operationId": "userDownload",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    },
    "/user/update-queue": {
      "patch": {
        "tags": [
          "user"
        ],
        "summary": "Update the logged-in user's queue",
        "description": "Returns an array of the logged-in user's queueItems",
        "operationId": "userUpdateQueue",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "authorization": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "authorization": {
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  },
  "definitions": {
    "AccountClaimToken": {
      "type": "object",
      "required": [
        "id",
        "claimed",
        "yearsToAdd"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "claimed": {
          "type": "boolean"
        },
        "yearsToAdd": {
          "type": "number"
        }
      }
    },
    "AppStorePurchase": {
      "type": "object",
      "required": [
        "transactionId",
        "cancellation_date",
        "cancellation_date_ms",
        "cancellation_date_pst",
        "cancellation_reason",
        "expires_date",
        "expires_date_ms",
        "expires_date_pst",
        "is_in_intro_offer_period",
        "is_trial_period",
        "original_purchase_date",
        "original_purchase_date_ms",
        "original_purchase_date_pst",
        "original_transaction_id",
        "product_id",
        "promotional_offer_id",
        "purchase_date",
        "purchase_date_ms",
        "purchase_date_pst",
        "quantity",
        "transaction_id",
        "web_order_line_item_id"
      ],
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "cancellation_date": {
          "type": "string"
        },
        "cancellation_date_ms": {
          "type": "string"
        },
        "cancellation_date_pst": {
          "type": "string"
        },
        "cancellation_reason": {
          "type": "string"
        },
        "expires_date": {
          "type": "string"
        },
        "expires_date_ms": {
          "type": "string"
        },
        "expires_date_pst": {
          "type": "string"
        },
        "is_in_intro_offer_period": {
          "type": "boolean"
        },
        "is_trial_period": {
          "type": "boolean"
        },
        "original_purchase_date": {
          "type": "string"
        },
        "original_purchase_date_ms": {
          "type": "string"
        },
        "original_purchase_date_pst": {
          "type": "string"
        },
        "original_transaction_id": {
          "type": "string"
        },
        "product_id": {
          "type": "string"
        },
        "promotional_offer_id": {
          "type": "string"
        },
        "purchase_date": {
          "type": "string"
        },
        "purchase_date_ms": {
          "type": "string"
        },
        "purchase_date_pst": {
          "type": "string"
        },
        "quantity": {
          "type": "number"
        },
        "transaction_id": {
          "type": "string"
        },
        "web_order_line_item_id": {
          "type": "string"
        }
      }
    },
    "Author": {
      "type": "object",
      "required": [
        "id",
        "name",
        "slug"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "podcasts": {
          "$ref": "#/definitions/Podcast"
        }
      }
    },
    "Category": {
      "type": "object",
      "required": [
        "id",
        "slug",
        "title"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "categories": {
          "$ref": "#/definitions/Category"
        }
      }
    },
    "Episode": {
      "type": "object",
      "required": [
        "id",
        "mediaUrl"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "mediaUrl": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "duration": {
          "type": "integer"
        },
        "episodeType": {
          "type": "string"
        },
        "guid": {
          "type": "string"
        },
        "imageUrl": {
          "type": "string"
        },
        "isExplicit": {
          "type": "boolean"
        },
        "isPublic": {
          "type": "boolean"
        },
        "linkUrl": {
          "type": "string"
        },
        "mediaFilesize": {
          "type": "integer"
        },
        "mediaType": {
          "type": "string"
        },
        "pastAllTimeTotalUniquePageviews": {
          "type": "integer"
        },
        "pastHourTotalUniquePageviews": {
          "type": "integer"
        },
        "pastDayTotalUniquePageviews": {
          "type": "integer"
        },
        "pastWeekTotalUniquePageviews": {
          "type": "integer"
        },
        "pastMonthTotalUniquePageviews": {
          "type": "integer"
        },
        "pastYearTotalUniquePageviews": {
          "type": "integer"
        },
        "pubDate": {
          "type": "string",
          "format": "date"
        },
        "title": {
          "type": "string"
        },
        "authors": {
          "$ref": "#/definitions/Author"
        },
        "categories": {
          "$ref": "#/definitions/Category"
        },
        "mediaRefs": {
          "$ref": "#/definitions/MediaRef"
        },
        "podcast": {
          "$ref": "#/definitions/Podcast"
        }
      }
    },
    "FeedUrl": {
      "type": "object",
      "required": [
        "id",
        "url",
        "podcast"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "isAuthority": {
          "type": "boolean"
        },
        "podcast": {
          "$ref": "#/definitions/Podcast"
        }
      }
    },
    "GooglePlayPurchase": {
      "type": "object",
      "required": [
        "transactionId",
        "acknowledgementState",
        "consumptionState",
        "developerPayload",
        "kind",
        "productId",
        "purchaseTimeMillis",
        "purchaseState",
        "purchaseToken"
      ],
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "acknowledgementState": {
          "type": "number"
        },
        "consumptionState": {
          "type": "number"
        },
        "developerPayload": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "purchaseTimeMillis": {
          "type": "string"
        },
        "purchaseState": {
          "type": "number"
        },
        "purchaseToken": {
          "type": "boolean"
        }
      }
    },
    "MediaRef": {
      "type": "object",
      "required": [
        "id",
        "episodeMediaUrl",
        "startTime"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "endTime": {
          "type": "integer"
        },
        "isPublic": {
          "type": "boolean"
        },
        "pastAllTimeTotalUniquePageviews": {
          "type": "integer"
        },
        "pastHourTotalUniquePageviews": {
          "type": "integer"
        },
        "pastDayTotalUniquePageviews": {
          "type": "integer"
        },
        "pastWeekTotalUniquePageviews": {
          "type": "integer"
        },
        "pastMonthTotalUniquePageviews": {
          "type": "integer"
        },
        "pastYearTotalUniquePageviews": {
          "type": "integer"
        },
        "startTime": {
          "type": "integer"
        },
        "title": {
          "type": "string"
        },
        "authors": {
          "$ref": "#/definitions/Author"
        },
        "categories": {
          "$ref": "#/definitions/Category"
        },
        "episode": {
          "$ref": "#/definitions/Episode"
        },
        "owner": {
          "$ref": "#/definitions/User"
        },
        "podcast": {
          "$ref": "#/definitions/Podcast"
        }
      }
    },
    "PayPalOrder": {
      "type": "object",
      "required": [
        "paymentID"
      ],
      "properties": {
        "paymentID": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Playlist": {
      "type": "object",
      "required": [
        "id",
        "owner"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "isPublic": {
          "type": "boolean"
        },
        "itemsOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string"
        },
        "mediaRefs": {
          "$ref": "#/definitions/MediaRef"
        },
        "owner": {
          "$ref": "#/definitions/User"
        }
      }
    },
    "Podcast": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "podcastIndexId": {
          "type": "string"
        },
        "authorityId": {
          "type": "string"
        },
        "alwaysFullyParse": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "feedLastUpdated": {
          "type": "string",
          "format": "date"
        },
        "guid": {
          "type": "string"
        },
        "hideDynamicAdsWarning": {
          "type": "boolean"
        },
        "imageUrl": {
          "type": "string"
        },
        "isExplicit": {
          "type": "boolean"
        },
        "isPublic": {
          "type": "boolean"
        },
        "language": {
          "type": "string"
        },
        "lastEpisodePubDate": {
          "type": "string"
        },
        "lastEpisodeTitle": {
          "type": "string"
        },
        "linkUrl": {
          "type": "string"
        },
        "pastAllTimeTotalUniquePageviews": {
          "type": "integer"
        },
        "pastHourTotalUniquePageviews": {
          "type": "integer"
        },
        "pastDayTotalUniquePageviews": {
          "type": "integer"
        },
        "pastWeekTotalUniquePageviews": {
          "type": "integer"
        },
        "pastMonthTotalUniquePageviews": {
          "type": "integer"
        },
        "pastYearTotalUniquePageviews": {
          "type": "integer"
        },
        "shrunkImageUrl": {
          "type": "string"
        },
        "sortableTitle": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "authors": {
          "$ref": "#/definitions/Author"
        },
        "categories": {
          "$ref": "#/definitions/Category"
        },
        "episodes": {
          "$ref": "#/definitions/Episode"
        },
        "feedUrls": {
          "$ref": "#/definitions/FeedUrl"
        }
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "email"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subscribedPodcastIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "playlists": {
          "$ref": "#/definitions/Playlist"
        }
      }
    }
  }
}
